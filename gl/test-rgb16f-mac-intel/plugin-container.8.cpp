// process.name = "/Users/jgilbert/Downloads/Firefox Nightly.app/Contents/MacOS/plugin-container.app/Contents/MacOS/plugin-container";
//CGLSetCurrentContext(NULL) = kCGLNoError;
//CGLChoosePixelFormat({kCGLPFAOpenGLProfile, kCGLOGLPVersion_3_2_Core, 0}, &0x11b5cb980, &2) = kCGLNoError;
//CGLRetainPixelFormat(0x11b5cb980) = 0x11b5cb980;
//CGLReleasePixelFormat(0x11b5cb980);
//CGLCreateContext(0x11b5cb980, NULL, &0x11bacc000) = kCGLNoError;
//CGLRetainContext(0x11bacc000) = 0x11bacc000;
//CGLReleaseContext(0x11bacc000);
//CGLReleasePixelFormat(0x11b5cb980);
//CGLEnable(0x11bacc000, kCGLCEMPEngine) = kCGLNoError;
//CGLSetCurrentContext(0x11bacc000) = kCGLNoError;
//CGLSetParameter(0x11bacc000, kCGLCPSwapInterval, &1) = kCGLNoError;
//glGetIntegerv(GL_NUM_EXTENSIONS, &53);
//glGetIntegerv(GL_VIEWPORT, {0, 0, 0, 0});
//glGetIntegerv(GL_SCISSOR_BOX, {0, 0, 0, 0});
//glGetIntegerv(GL_MAX_TEXTURE_SIZE, &16384);
//glGetIntegerv(GL_MAX_CUBE_MAP_TEXTURE_SIZE, &16384);
//glGetIntegerv(GL_MAX_RENDERBUFFER_SIZE, &16384);
//glGetIntegerv(GL_MAX_VIEWPORT_DIMS, {16384, 16384});
//glGetIntegerv(GL_MAX_SAMPLES, &8);
glBindFramebuffer(GL_FRAMEBUFFER, 0);
GLuint handle;
glGenTextures(1, &handle);
assert(handle == 1);
//glGetIntegerv(GL_TEXTURE_BINDING_2D, &0);
glBindTexture(GL_TEXTURE_2D, 1);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
glBindTexture(GL_TEXTURE_2D, 0);
glGenFramebuffers(1, &handle);
assert(handle == 1);
//glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &0);
//glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &0);
glBindFramebuffer(GL_FRAMEBUFFER, 1);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 1, 0);
assert( glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE );
glBindFramebuffer(GL_FRAMEBUFFER, 0);
//glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &0);
//glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &0);
glGenFramebuffers(1, &handle);
assert(handle == 2);
//glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &0);
//glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 1, 0);
glBindFramebuffer(GL_FRAMEBUFFER, 0);
//glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &0);
//glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
assert( glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE );
glBindFramebuffer(GL_FRAMEBUFFER, 0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
//glReadBuffer(GL_COLOR_ATTACHMENT0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
const GLenum ca0 = GL_COLOR_ATTACHMENT0;
//glDrawBuffers(1, &ca0);
glBindFramebuffer(GL_FRAMEBUFFER, 0);
//glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &0);
//glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glScissor(0, 0, 1, 1);
glViewport(0, 0, 1, 1);
//glGetIntegerv(GL_STENCIL_VALUE_MASK, &-1);
//glGetIntegerv(GL_STENCIL_BACK_VALUE_MASK, &-1);
//glGetIntegerv(GL_STENCIL_WRITEMASK, &-1);
//glGetIntegerv(GL_STENCIL_BACK_WRITEMASK, &-1);
//glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &16);
//glGetIntegerv(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS, &80);
//glGetIntegerv(GL_MAX_VIEWPORT_DIMS, {16384, 16384});
//glGetIntegerv(GL_MAX_3D_TEXTURE_SIZE, &2048);
//glGetIntegerv(GL_MAX_ARRAY_TEXTURE_LAYERS, &2048);
//glGetIntegerv(GL_MAX_TEXTURE_IMAGE_UNITS, &16);
//glGetIntegerv(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS, &16);
//glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_VECTORS, &1024);
//glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, &1024);
//glGetIntegerv(GL_MAX_VARYING_VECTORS, &15);
//glGetFloatv(GL_ALIASED_LINE_WIDTH_RANGE, {1, 1});
//glGetFloatv(GL_POINT_SIZE_RANGE, {1, 255.875});
glEnable(GL_PROGRAM_POINT_SIZE);
glEnable(GL_TEXTURE_CUBE_MAP_SEAMLESS);
glGenVertexArrays(1, &handle);
assert(handle == 1);
glBindVertexArray(1);
glGenTextures(1, &handle);
assert(handle == 2);
//glGetIntegerv(GL_TEXTURE_BINDING_2D, &0);
//glBindTexture(GL_TEXTURE_2D, 2);
//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
//glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 300, 150, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
//glBindTexture(GL_TEXTURE_2D, 0);
glGenFramebuffers(1, &handle);
assert(handle == 3);
glGenRenderbuffers(1, &handle);
assert(handle == 1);
glGenRenderbuffers(1, &handle);
assert(handle == 2);
//glBindFramebuffer(GL_FRAMEBUFFER, 3);
//glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 2, 0);
//glGetIntegerv(GL_RENDERBUFFER_BINDING, &0);
//glBindRenderbuffer(GL_RENDERBUFFER, 1);
//glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 300, 150);
//glBindRenderbuffer(GL_RENDERBUFFER, 0);
//glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, 1);
//glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, 1);
//assert( glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE );
//glBindFramebuffer(GL_FRAMEBUFFER, 2);
//glViewport(0, 0, 300, 150);
//glScissor(0, 0, 300, 150);
assert( glCreateShader(GL_VERTEX_SHADER) == 1 );
const char* src = nullptr;
//glShaderSource(1, 1, &(src = R"(#version 410
//in vec4 webgl_1eab6758d3ea121c;
//in vec2 webgl_9f6d0185084179c7;
//out vec2 webgl_a3c804d63a6999e3;
//void main(){
//(gl_Position = vec4(0.0, 0.0, 0.0, 0.0));
//(webgl_a3c804d63a6999e3 = vec2(0.0, 0.0));
//(gl_Position = webgl_1eab6758d3ea121c);
//(webgl_a3c804d63a6999e3 = webgl_9f6d0185084179c7);
//}
//)"), NULL);
//glCompileShader(1);
//glGetShaderiv(1, GL_COMPILE_STATUS, &1);
//glGetShaderiv(1, GL_INFO_LOG_LENGTH, &0);
assert( glCreateShader(GL_FRAGMENT_SHADER) == 2 );
//glShaderSource(2, 1, &(src = R"(#version 410
//out vec4 webgl_FragData[gl_MaxDrawBuffers];
//uniform sampler2D webgl_cb6b29086417f5a2;
//in vec2 webgl_a3c804d63a6999e3;
//void main(){
//(webgl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0));
//(webgl_FragData[0] = texture(webgl_cb6b29086417f5a2, webgl_a3c804d63a6999e3));
//}
//)"), NULL);
//  glShaderSource(2, 1, &src, NULL);
//glCompileShader(2);
//glGetShaderiv(2, GL_COMPILE_STATUS, &1);
//glGetShaderiv(2, GL_INFO_LOG_LENGTH, &0);
assert( glCreateProgram() == 3 );
//glAttachShader(3, 1);
//glAttachShader(3, 2);
//  assert(!glGetError());
//glBindAttribLocation(3, 1, "webgl_9f6d0185084179c7");
//glBindAttribLocation(3, 0, "webgl_1eab6758d3ea121c");
//glBindAttribLocation(3, 0, "webgl_1eab6758d3ea121c"); // fake
//glBindAttribLocation(3, 1, "webgl_9f6d0185084179c7"); // fake
//glLinkProgram(3);
//glGetProgramiv(3, GL_INFO_LOG_LENGTH, &0);
//glGetProgramiv(3, GL_LINK_STATUS, &1);
//glGetProgramiv(3, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &23);
//glGetProgramiv(3, GL_ACTIVE_UNIFORM_MAX_LENGTH, &23);
//glGetProgramiv(3, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, &0);
//glGetProgramiv(3, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, &0);
//glGetProgramiv(3, GL_ACTIVE_ATTRIBUTES, &2);
//glGetActiveAttrib(3, 0, 23, &22, &1, &GL_FLOAT_VEC4, "webgl_1eab6758d3ea121c");
//glGetAttribLocation(3, "webgl_1eab6758d3ea121c") = 0;
//glGetActiveAttrib(3, 1, 23, &22, &1, &GL_FLOAT_VEC2, "webgl_9f6d0185084179c7");
//glGetAttribLocation(3, "webgl_9f6d0185084179c7") = 1;
//glGetProgramiv(3, GL_ACTIVE_UNIFORMS, &1);
//glGetActiveUniform(3, 0, 23, &22, &1, &GL_SAMPLER_2D, "webgl_cb6b29086417f5a2");
//glGetProgramiv(3, GL_ACTIVE_UNIFORM_BLOCKS, &0);
//glGetProgramiv(3, GL_TRANSFORM_FEEDBACK_VARYINGS, &0);
  assert(!glGetError());
//  dump_shader_log("shader1", 1);
//  dump_shader_log("shader2", 2);
//  dump_program_log("prog3", 3);
//glUseProgram(3);
//  assert(!glGetError());
//glUseProgram(3);
//  assert(!glGetError());
// glGenBuffers(1, &handle);
// assert(handle == 1);
// glBindBuffer(GL_ARRAY_BUFFER, 1);
// //glBufferData(GL_ARRAY_BUFFER, 48, blob(48), GL_STATIC_DRAW);
// glBufferData(GL_ARRAY_BUFFER, 48, nullptr, GL_STATIC_DRAW);
// glEnableVertexAttribArray(0);
// glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, NULL);
// glGenBuffers(1, &handle);
// assert(handle == 2);
// glBindBuffer(GL_ARRAY_BUFFER, 2);
// //glBufferData(GL_ARRAY_BUFFER, 48, blob(48), GL_STATIC_DRAW);
// glBufferData(GL_ARRAY_BUFFER, 48, nullptr, GL_STATIC_DRAW);
// glEnableVertexAttribArray(1);
// glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, NULL);
//   assert(!glGetError());
assert( glCreateProgram() == 4 );
assert( glCreateShader(GL_VERTEX_SHADER) == 5 );
glShaderSource(5, 1, &(src = R"(#version 410
void main(){
(gl_Position = vec4(0.0, 0.0, 0.0, 0.0));
(gl_Position = vec4(0.0, 0.0, 0.0, 1.0));
}
)"), NULL);
glCompileShader(5);
//glGetShaderiv(5, GL_COMPILE_STATUS, &1);
//glGetShaderiv(5, GL_INFO_LOG_LENGTH, &0);
glAttachShader(4, 5);
assert( glCreateShader(GL_FRAGMENT_SHADER) == 6 );
glShaderSource(6, 1, &(src = R"(#version 410
out vec4 webgl_FragColor;
uniform sampler2D webgl_cb6b29086417f5a2;
uniform vec4 webgl_8a47bd46608ce4b3;
in vec2 webgl_a3c804d63a6999e3;
void main(){
(webgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0));
vec4 webgl_54d478077cd5722c = texture(webgl_cb6b29086417f5a2, vec2(0.0, 0.0));
(webgl_FragColor = (webgl_54d478077cd5722c / 20000.0));
}
)"), NULL);
glCompileShader(6);
//glGetShaderiv(6, GL_COMPILE_STATUS, &1);
//glGetShaderiv(6, GL_INFO_LOG_LENGTH, &0);
glAttachShader(4, 6);
glLinkProgram(4);
//  dump_shader_log("shader5", 5);
//  dump_shader_log("shader6", 6);
//  dump_program_log("prog4", 4);
//glGetProgramiv(4, GL_INFO_LOG_LENGTH, &0);
//glGetProgramiv(4, GL_LINK_STATUS, &1);
//glGetProgramiv(4, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &0);
//glGetProgramiv(4, GL_ACTIVE_UNIFORM_MAX_LENGTH, &23);
//glGetProgramiv(4, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, &0);
//glGetProgramiv(4, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, &0);
//glGetProgramiv(4, GL_ACTIVE_ATTRIBUTES, &0);
//glGetProgramiv(4, GL_ACTIVE_UNIFORMS, &1);
//glGetActiveUniform(4, 0, 23, &22, &1, &GL_SAMPLER_2D, "webgl_cb6b29086417f5a2");
//glGetProgramiv(4, GL_ACTIVE_UNIFORM_BLOCKS, &0);
//glGetProgramiv(4, GL_TRANSFORM_FEEDBACK_VARYINGS, &0);
glUseProgram(4);
  assert(!glGetError());
glGenTextures(1, &handle);
assert(handle == 3);
  assert(!glGetError());
glBindTexture(GL_TEXTURE_2D, 3);
  assert(!glGetError());
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
  assert(!glGetError());
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
  assert(!glGetError());
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB16F, 2, 2, 0, GL_RGB, GL_HALF_FLOAT, NULL);
  assert(!glGetError());
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB16F, 2, 2, 0, GL_RGB, GL_HALF_FLOAT, NULL);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB16F, 2, 2, 0, GL_RGB, GL_HALF_FLOAT, NULL);
  assert(!glGetError());
glGenFramebuffers(1, &handle);
assert(handle == 4);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 3, 0);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, 0);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, 0);
//glDrawBuffers(1, &ca0);
//glReadBuffer(GL_COLOR_ATTACHMENT0);
assert( glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE );
//glDepthMask(GL_TRUE);
//  assert(!glGetError());
//glStencilMaskSeparate(GL_FRONT, 4294967295);
//glClearColor(0, 0, 0, 0);
//glClearDepth(1);
//glClearStencil(0);
//glDrawBuffers(1, &ca0);
const bool INCUR_DRIVER_BUG = true;
if (INCUR_DRIVER_BUG) {
  glClear(GL_COLOR_BUFFER_BIT);
}
//glDrawBuffers(1, &ca0);
//glDepthMask(GL_TRUE);
//glStencilMaskSeparate(GL_FRONT, 4294967295);
//glClearColor(0, 0, 0, 0);
//glClearDepth(1);
//glClearStencil(0);
//glBindFramebuffer(GL_FRAMEBUFFER, 4);
glClearColor(10000, 10000, 10000, 10000);
//glBindFramebuffer(GL_FRAMEBUFFER, 4);
glClear(GL_COLOR_BUFFER_BIT);
//glBindFramebuffer(GL_FRAMEBUFFER, 4);
  assert(!glGetError());
float temp_4f32[4];
glReadPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT, temp_4f32);
assert(temp_4f32[0] == 10000.0);
assert(temp_4f32[1] == 10000.0);
assert(temp_4f32[2] == 10000.0);
assert(temp_4f32[3] == 1.0);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
handle = 4;
glDeleteFramebuffers(1, &handle);
glGenTextures(1, &handle);
assert(handle == 4);
glBindTexture(GL_TEXTURE_2D, 4);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
glGenFramebuffers(1, &handle);
assert(handle == 4);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 4, 0);
glViewport(0, 0, 1, 1);
glUseProgram(4);
glBindTexture(GL_TEXTURE_2D, 3);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, 0);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, 0);
//glDrawBuffers(1, &ca0);
//glReadBuffer(GL_COLOR_ATTACHMENT0);
assert( glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE );
//glDepthMask(GL_TRUE);
//glStencilMaskSeparate(GL_FRONT, 4294967295);
//glClearColor(0, 0, 0, 0);
//glClearDepth(1);
//glClearStencil(0);
//glDrawBuffers(1, &ca0);
//glClear(GL_COLOR_BUFFER_BIT);
//glDrawBuffers(1, &ca0);
//glDepthMask(GL_TRUE);
//glStencilMaskSeparate(GL_FRONT, 4294967295);
//glClearColor(10000, 10000, 10000, 10000);
//glClearDepth(1);
//glClearStencil(0);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
glDrawArrays(GL_POINTS, 0, 1);
glBindFramebuffer(GL_FRAMEBUFFER, 4);
uint32_t temp_u32;
glReadPixels(0, 0, 1, 1, GL_RGBA, GL_UNSIGNED_BYTE, &temp_u32);
  assert(!glGetError());
printf("temp_u32: 0x%08x\n", temp_u32);
assert(temp_u32 == 0x00808080);

/*
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glDepthMask(GL_TRUE);
glStencilMaskSeparate(GL_FRONT, 4294967295);
glClearColor(0, 0, 0, 0);
glClearDepth(1);
glClearStencil(0);
glClear(GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
glDepthMask(GL_TRUE);
glStencilMaskSeparate(GL_FRONT, 4294967295);
glClearColor(10000, 10000, 10000, 10000);
glClearDepth(1);
glClearStencil(0);
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glDrawArrays(GL_POINTS, 0, 1);
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glReadPixels(0, 0, 300, 150, GL_RGBA, GL_UNSIGNED_BYTE, 0x11d602000);
glFlush();
glGenTextures(1, &5);
//glGetIntegerv(GL_TEXTURE_BINDING_2D, &3);
glBindTexture(GL_TEXTURE_2D, 5);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 300, 150, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
glBindTexture(GL_TEXTURE_2D, 3);
glGenFramebuffers(1, &5);
glBindFramebuffer(GL_FRAMEBUFFER, 5);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 5, 0);
glCheckFramebufferStatus(GL_FRAMEBUFFER) = GL_FRAMEBUFFER_COMPLETE;
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glGenFramebuffers(1, &6);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 5, 0);
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glCheckFramebufferStatus(GL_FRAMEBUFFER) = GL_FRAMEBUFFER_COMPLETE;
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glDeleteFramebuffers(1, &2);
glDeleteRenderbuffers(2, {0, 0});
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glReadBuffer(GL_COLOR_ATTACHMENT0);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glDrawBuffers(1, &GL_COLOR_ATTACHMENT0);
glBindFramebuffer(GL_FRAMEBUFFER, 3);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glBlitFramebuffer(0, 0, 300, 150, 0, 0, 300, 150, GL_COLOR_BUFFER_BIT, GL_NEAREST);
glDeleteFramebuffers(1, &1);
glDeleteTextures(1, &1);
glGenTextures(1, &1);
//glGetIntegerv(GL_TEXTURE_BINDING_2D, &3);
glBindTexture(GL_TEXTURE_2D, 1);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 300, 150, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
glBindTexture(GL_TEXTURE_2D, 3);
glGenFramebuffers(1, &1);
glBindFramebuffer(GL_FRAMEBUFFER, 1);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 1, 0);
glCheckFramebufferStatus(GL_FRAMEBUFFER) = GL_FRAMEBUFFER_COMPLETE;
glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 1, 0);
glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glReadBuffer(GL_COLOR_ATTACHMENT0);
glBindFramebuffer(GL_FRAMEBUFFER, 6);
glDrawBuffers(1, &GL_COLOR_ATTACHMENT0);
glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glGenFramebuffers(1, &2);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 5, 0);
//glGetIntegerv(GL_PACK_ALIGNMENT, &4);
//glGetIntegerv(GL_PIXEL_PACK_BUFFER_BINDING, &0);
//glGetIntegerv(GL_PACK_ROW_LENGTH, &0);
//glGetIntegerv(GL_PACK_SKIP_PIXELS, &0);
//glGetIntegerv(GL_PACK_SKIP_ROWS, &0);
glReadPixels(0, 0, 300, 150, GL_BGRA, GL_UNSIGNED_BYTE, 0x11d4d0000);
glPixelStorei(GL_PACK_ALIGNMENT, 4);
glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);
glPixelStorei(GL_PACK_ROW_LENGTH, 0);
glPixelStorei(GL_PACK_SKIP_PIXELS, 0);
glPixelStorei(GL_PACK_SKIP_ROWS, 0);
glDeleteFramebuffers(1, &2);
glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glFlush();
glGenFramebuffers(1, &2);
glBindFramebuffer(GL_FRAMEBUFFER, 2);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 5, 0);
glCheckFramebufferStatus(GL_FRAMEBUFFER) = GL_FRAMEBUFFER_COMPLETE;
//glGetIntegerv(GL_PACK_ALIGNMENT, &4);
//glGetIntegerv(GL_PIXEL_PACK_BUFFER_BINDING, &0);
//glGetIntegerv(GL_PACK_ROW_LENGTH, &0);
//glGetIntegerv(GL_PACK_SKIP_PIXELS, &0);
//glGetIntegerv(GL_PACK_SKIP_ROWS, &0);
glPixelStorei(GL_PACK_ALIGNMENT, 8);
glReadPixels(0, 0, 300, 150, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, 0x11d5c6000);
glPixelStorei(GL_PACK_ALIGNMENT, 4);
glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);
glPixelStorei(GL_PACK_ROW_LENGTH, 0);
glPixelStorei(GL_PACK_SKIP_PIXELS, 0);
glPixelStorei(GL_PACK_SKIP_ROWS, 0);
glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 6);
glBindFramebuffer(GL_READ_FRAMEBUFFER, 3);
glDeleteFramebuffers(1, &2);
glFlush();
CGLSetCurrentContext(0x11bacc000) = kCGLNoError;
glViewport(0, 0, 1, 1) // fake;
glScissor(0, 0, 300, 150) // fake;
CGLSetParameter(0x11bacc000, kCGLCPSwapInterval, &1) = kCGLNoError;
CGLSetCurrentContext(0x11bacc000) = kCGLNoError;
CGLSetParameter(0x11bacc000, kCGLCPSwapInterval, &1) = kCGLNoError;
*/
